@page "/"
@using BudgetBuddy.Lib.DAL
@using BudgetBuddy.Models
@using BudgetBuddy.Services
@inject BudgetService BudgetService
@inject CategoriesManager CategoriesManager
@inject BudgetItemManager BudgetItemManager

<h1 class="text-center my-4 text-primary" style="font-weight: 600; font-size: 2.5rem;">Välkommen till BudgetBuddy</h1>

<div class="container mt-4">
    <div class="text-center">
        <p class="text-muted" style="font-size: 1.1rem;">Hantera din ekonomi och håll koll på dina inkomster och
            utgifter enkelt.</p>
    </div>

    <div
        style="border: 4px solid #f1f3f5; border-radius: 8px; overflow: hidden; max-width: 600px; margin: 0 auto;">
        <img src="banknotes-7850299_640.jpg"
             alt="Pengar"
             class="img-fluid"
             style="display: block; width: 100%; height: auto;"/>
    </div>
</div>

<div class="mt-5 d-flex justify-content-end align-items-center">
    <div class="form-group me-3">
        <select id="yearSelect" class="form-select form-select-lg" @bind="SelectedYear" @bind:event="onchange">
            <option value="">År</option>
            @if (_years != null)
            {
                @foreach (var year in _years)
                {
                    <option value="@year">@year</option>
                }
            }
        </select>
    </div>
    <div class="form-group">
        <select id="monthSelect" class="form-select form-select-lg" @bind="SelectedMonth" @bind:event="onchange">
            <option value="">Alla månader</option>
            @foreach (var month in GetMonths())
            {
                <option value="@month.Value">@month.Text</option>
            }
        </select>
    </div>
</div>

<div class="card mt-5 shadow" style="border-radius: 15px;">
    <div class="card-header bg-success text-white" style="border-radius: 15px 15px 0 0;">
        <h4>@GetTitle("Totalt inkomster")</h4>
    </div>
    <div class="card-body">
        <h3 class="text-success">@_incomeItems.Sum(x => x.Amount) kr</h3>
    </div>
</div>

<div class="card mt-4 shadow" style="border-radius: 15px;">
    <div class="card-header bg-danger text-white" style="border-radius: 15px 15px 0 0;">
        <h4>@GetTitle("Totalt utgifter")</h4>
    </div>
    <div class="card-body">
        <h3 class="text-danger">@_expenseItems.Sum(x => x.Amount) kr</h3>
    </div>
</div>


<div class="card mt-4 shadow" style="border-radius: 15px;">
    <div class="card-header bg-primary text-white" style="border-radius: 15px 15px 0 0;">
        <h4>@GetTitle("Resultat")</h4>
    </div>
    <div class="card-body">
        <h3 class="text-primary">
            @if (_netResult >= 0)
            {
                @($"Du har {_netResult} kr kvar att spendera ")
            }
            else
            {
                @($"Din budget ligger på {_netResult} kr, ajajajaj lyxfällan nästa")
            }
        </h3>
    </div>
</div>


<div class="card mt-5 shadow" style="border-radius: 15px;">
    <div class="card-header bg-info text-white" style="border-radius: 15px 15px 0 0;">
        <h4>Miniräknare</h4>
    </div>
    <div class="card-body">
        <div class="calculator d-flex flex-column align-items-center">
            <input type="text" class="form-control mb-3" @bind="_display" placeholder="Skriv din ekvation här"
                   style="max-width: 300px; font-size: 1.2rem; text-align: center;"/>
            <div>
                <button class="btn btn-success me-2 px-4 py-2" @onclick="Calculate">=</button>
                <button class="btn btn-danger px-4 py-2" @onclick="Clear">C</button>
            </div>
        </div>
    </div>
</div>


@code
{
    private List<BudgetItem> _budgetsItems = new();
    private List<Category> _categories = new();
    private List<BudgetItem> _filteredBudgetItems { get; set; }
    private List<BudgetItem> _incomeItems = new();
    private List<BudgetItem> _expenseItems = new();
    private decimal _netResult;
    private int? _selectedMonth;
    private int? _selectedYear;
    private IEnumerable<int> _years { get; set; }


    
    private string? _display = "";
    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoriesManager.GetCategoriesAsync();
        _budgetsItems = await BudgetItemManager.GetBudgetItemsAsync();
        await UpdatedFilters();
        _years = await GetYears();

        if (_categories.Count <= 0 || _budgetsItems.Count <= 0)
        {
            await BudgetService.SeedCategoriesAndBudgetItemsAsync(_categories, _budgetsItems);
        }
        SelectedYear = DateTime.Now.Year; 
        SelectedMonth = DateTime.Now.Month;
    }
   
    private async Task UpdatedFilters()
    {
         _incomeItems =  await GetFilteredBudgetItems(true); 
         _expenseItems = await GetFilteredBudgetItems(false);
         _netResult = _incomeItems.Sum(x => x.Amount) - _expenseItems.Sum(x => x.Amount);
         StateHasChanged();
    }
    
    private async Task<List<BudgetItem>> GetFilteredBudgetItems(bool isIncomeFilter)
    { 
        var items = await BudgetItemManager.GetBudgetItemsAsync(); 
        items = items.Where(i => i.IsIncome == isIncomeFilter).ToList(); 
        if (!string.IsNullOrEmpty(SelectedMonth?.ToString())) { var month = int.Parse(SelectedMonth.ToString()); items = items.Where(i => i.Date.Month == month).ToList(); } 
        if (!string.IsNullOrEmpty(SelectedYear?.ToString())) { var year = int.Parse(SelectedYear.ToString()); items = items.Where(i => i.Date.Year == year).ToList(); } return items; }

    private IEnumerable<(string Text, string Value)> GetMonths()
    {
        return Enumerable.Range(1, 12).Select(m => (
            Text: new DateTime(1, m, 1).ToString("MMMM"),
            Value: m.ToString()
        ));
    }

    private async Task<IEnumerable<int>> GetYears()
    {
        var items = await BudgetItemManager.GetBudgetItemsAsync();
        var years = items
            .Where(i => i.IsIncome == true)
            .Select(i => i.Date.Year)
            .Distinct()
            .OrderByDescending(y => y);
        return years;
    }

    int? SelectedYear
    {
        get => _selectedYear;
        set
        {
            _selectedYear = value;
            _ = UpdatedFilters();
        }
    }
    
    int? SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;
            _ = UpdatedFilters();
        }
    }
    
    private void Clear()
    {
        _display = "";
    }
    private string GetTitle(string baseTitle)
    {
        if (SelectedYear.HasValue && SelectedMonth.HasValue)
        {
            var monthName = new DateTime(1, SelectedMonth.Value, 1).ToString("MMMM", new System.Globalization.CultureInfo("sv-SE"));
            return $"{baseTitle} för {monthName} {SelectedYear}";
        }
        else if (SelectedYear.HasValue)
        {
            return $"{baseTitle} för {SelectedYear}";
        }
        else
        {
            return baseTitle;
        }
    }

    private void Calculate()
    {
        try
        {
            var result = new System.Data.DataTable().Compute(_display, null);
            _display = result.ToString();
        }
        catch
        {
            _display = "Fel i uttrycket!";
        }
    }
}
