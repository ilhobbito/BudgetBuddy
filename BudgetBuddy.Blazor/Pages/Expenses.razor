@page "/Expenses"
@using BudgetBuddy.Lib.DAL
@using BudgetBuddy.Models
@using BudgetBuddy.Services
@using System.Linq.Expressions
@inject BudgetService BudgetService
@inject CategoriesManager CategoriesManager
@inject BudgetItemManager BudgetItemManager

<div class="container mt-5">
    <h1 class="mb-4">Utgifter</h1>
    <p class="text-muted">Här kan du lägga till och hålla koll på dina utgifter.</p>

    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>Lägg till utgift</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@NewItem" OnValidSubmit="AddBudgetItem" FormName="BudgetForm">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="name" class="form-label">Utgiftskälla:</label>
                            <InputText id="name" class="form-control" @bind-Value="NewItem.Name"/>
                        </div>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Belopp:</label>
                            <InputNumber id="amount" class="form-control" @bind-Value="NewItem.Amount"/>
                        </div>
                        <div class="mb-3">
                            <label for="category" class="form-label">Kategori:</label>
                            <InputSelect id="category" class="form-control" @bind-Value="NewItem.CategoryId">
                                <option value="">Välj en kategori</option>
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <button type="submit" class="btn btn-primary">Lägg till</button>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Budgetposter</h4>
                        <div class="d-flex mb-0">
                            <div class="form-group mb-0 me-2">
                                <select id="yearSelect" class="form-select" @bind="SelectedYear">
                                    <option value="">År</option>
                                    @foreach (var year in Years)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-0 me-2">
                                <select id="monthSelect" class="form-select" @bind="SelectedMonth">
                                    <option value="">Alla månader</option>
                                    @foreach (var month in GetMonths())
                                    {
                                        <option value="@month.Value">@month.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th>Utgift</th>
                            <th>Belopp</th>
                            <th>Kategori</th>
                            <th>Datum</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in FilteredBudgetItems)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>@item.Amount kr</td>
                                <td>@(CategoryName = Categories.Where(c => c.Id == item.CategoryId).Select(c => c.Name).FirstOrDefault())</td>
                                <td>@item.Date.ToShortDateString()</td>
                            </tr>
                        }
                        </tbody>
                        <tfoot>
                        <tr>
                            <th>Totala utgifter:</th>
                            <th>@FilteredBudgetItems.Sum(i => i.Amount) kr</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private BudgetItem NewItem = new();
    private List<Category> Categories { get; set; } = new();
    private string SelectedMonth { get; set; } = "";
    private string SelectedYear { get; set; } = "";
    private List<BudgetItem> FilteredBudgetItems { get; set; } = new();
    private IEnumerable<int> Years { get; set; } = new List<int>();
    private string CategoryName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        
        Categories = await CategoriesManager.GetCategoriesAsync();
        FilteredBudgetItems = await GetFilteredBudgetItems();
        Years = await GetYears();
    }

    private void AddBudgetItem()
    {
        NewItem.IsIncome = false; // Set item as expense
        NewItem.Date = DateTime.Now;
        BudgetItemManager.CreateBudgetItemAsync(NewItem);
        NewItem = new BudgetItem
        {
            Name = string.Empty,
            Amount = 0,
            IsIncome = false,
            Date = DateTime.Now
        };

        StateHasChanged();
    }

    private async Task<List<BudgetItem>> GetFilteredBudgetItems()
    {
        var items = await BudgetItemManager.GetBudgetItemsAsync();
        items = items.Where(i => i.IsIncome == false).ToList();
        
        if (!string.IsNullOrEmpty(SelectedMonth))
        {
            var month = int.Parse(SelectedMonth);
            items = items.Where(i => i.Date.Month == month).ToList();
        }
        if (!string.IsNullOrEmpty(SelectedYear))
        {
            var year = int.Parse(SelectedYear);
            items = items.Where(i => i.Date.Year == year).ToList();
        }

        return items;
    }

    private IEnumerable<(string Text, string Value)> GetMonths()
    {
        return Enumerable.Range(1, 12).Select(m => (
            Text: new DateTime(1, m, 1).ToString("MMMM"),
            Value: m.ToString()
        ));
    }

    private async Task<IEnumerable<int>> GetYears()
    {
        var items = await BudgetItemManager.GetBudgetItemsAsync(); 
        var years = items
            .Where(i => i.IsIncome == false)
            .Select(i => i.Date.Year)
            .Distinct()
            .OrderByDescending(y => y);
        return years;
    }
}
