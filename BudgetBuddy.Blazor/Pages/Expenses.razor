@page "/Expenses"
@using BudgetBuddy.Lib.DAL
@using BudgetBuddy.Models
@using BudgetBuddy.Services
@using System.Linq.Expressions
@inject BudgetService BudgetService
@inject CategoriesManager CategoriesManager
@inject BudgetItemManager BudgetItemManager

<div class="container mt-5">
    <h1 class="mb-4">Utgifter</h1>
    <div class="row">
        <div class="col-md-12">
            <div class="card mb-4">
                <div class="card-header bg-primary text-white">
                    <h4>Lägg till utgift</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@_newItem" OnValidSubmit="AddBudgetItem" FormName="BudgetForm">
                        <DataAnnotationsValidator/>
                        <ValidationSummary/>

                        <div class="mb-3">
                            <label for="name" class="form-label">Utgiftskälla:</label>
                            <InputText id="name" class="form-control" @bind-Value="_newItem.Name"/>
                        </div>
                        <div class="mb-3">
                            <label for="amount" class="form-label">Belopp:</label>
                            <InputNumber id="amount" class="form-control" @bind-Value="_newItem.Amount"/>
                        </div>
                        <div class="mb-3">
                            <label for="category" class="form-label">Kategori:</label>
                            <InputSelect id="category" class="form-control" @bind-Value="_newItem.CategoryId">
                                <option value="">Välj en kategori</option>
                                @foreach (var category in _categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">Lägg till</button>
                    </EditForm>
                </div>
            </div>
        </div>
        
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <div class="d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Budgetposter</h4>
                        <div class="d-flex mb-0">
                            <div class="form-group mb-0 me-2">
                                <select id="categorySelect" class="form-select" @bind="SelectedCategory" @bind:event="onchange">
                                    <option value="">Kategori</option>
                                    @foreach (var category in _categories)
                                    {
                                        <option value="@category.Name">@category.Name</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-0 me-2">
                                <select id="yearSelect" class="form-select" @bind="SelectedYear">
                                    <option value="">År</option>
                                    @foreach (var year in _years)
                                    {
                                        <option value="@year">@year</option>
                                    }
                                </select>
                            </div>
                            <div class="form-group mb-0 me-2">
                                <select id="monthSelect" class="form-select" @bind="SelectedMonth">
                                    <option value="">Alla månader</option>
                                    @foreach (var month in GetMonths())
                                    {
                                        <option value="@month.Value">@month.Text</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                        <tr>
                            <th>Utgift</th>
                            <th>Belopp</th>
                            <th>Kategori</th>
                            <th>Datum</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in _filteredBudgetItems)
                        {
                            <tr>
                                <td>@item.Name</td>
                                <td>-@item.Amount kr</td>
                                <td>@(_categoryName = _categories.Where(c => c.Id == item.CategoryId).Select(c => c.Name).FirstOrDefault())</td>
                                <td>@item.Date.ToShortDateString()</td>
                            </tr>
                        }
                        </tbody>
                        <tfoot>
                        <tr>
                            <th>Totala utgifter:</th>
                            <th>-@_filteredBudgetItems.Sum(i => i.Amount) kr</th>
                            <th></th>
                            <th></th>
                        </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private BudgetItem _newItem = new();
    private List<Category> _categories { get; set; } = new();
    private List<BudgetItem> _filteredBudgetItems { get; set; } = new();
    private IEnumerable<int> _years { get; set; } = new List<int>();
    private string _categoryName { get; set; }
    private int? _selectedMonth;
    private int? _selectedYear;
    private string? _selectedCategory;

    protected override async Task OnInitializedAsync()
    {
        _categories = await CategoriesManager.GetCategoriesAsync();
        _filteredBudgetItems = await GetFilteredBudgetItems();
        _years = await GetYears();
        SelectedYear = DateTime.Now.Year; 
        SelectedMonth = DateTime.Now.Month;
    }

    private async Task AddBudgetItem()
    {
        _newItem.IsIncome = false; 
        _newItem.Date = DateTime.Now;
        await BudgetItemManager.CreateBudgetItemAsync(_newItem);
        _filteredBudgetItems = await GetFilteredBudgetItems();
        _newItem = new BudgetItem
        {
            Name = string.Empty,
            Amount = 0,
            IsIncome = false,
            Date = DateTime.Now
        };
        StateHasChanged();
    }

    private async Task<List<BudgetItem>> GetFilteredBudgetItems()
    {
        var items = await BudgetItemManager.GetBudgetItemsAsync();
        items = items.Where(i => i.IsIncome == false).ToList();
        if (SelectedMonth != null || SelectedMonth.ToString() != "")
        {
            var month = int.Parse(SelectedMonth.ToString());
            items = items.Where(i => i.Date.Month == month).ToList();
        }
        if (SelectedYear != null ||SelectedYear.ToString() != "")
        {
            var year = int.Parse(SelectedYear.ToString());
            items = items.Where(i => i.Date.Year == year).ToList();
        }
        if (!string.IsNullOrWhiteSpace(SelectedCategory))
        {
            var selectedCategory = _categories.Where(c => c.Name == SelectedCategory).FirstOrDefault();
            items = items.Where(i => i.CategoryId == selectedCategory.Id).ToList();
        }
        return items;
    }

    private IEnumerable<(string Text, string Value)> GetMonths()
    {
        return Enumerable.Range(1, 12).Select(m => (
            Text: new DateTime(1, m, 1).ToString("MMMM"),
            Value: m.ToString()
        ));
    }

    private async Task<IEnumerable<int>> GetYears()
    {
        var items = await BudgetItemManager.GetBudgetItemsAsync(); 
        var years = items
            .Where(i => i.IsIncome == false)
            .Select(i => i.Date.Year)
            .Distinct()
            .OrderByDescending(y => y);
        return years;
    }
    
    private async Task UpdatedFilters()
    {
        _filteredBudgetItems =  await GetFilteredBudgetItems();
        StateHasChanged();
    }
    
    public int? SelectedYear
    {
        get => _selectedYear;
        set
        {
            _selectedYear = value;
            _ = UpdatedFilters();
        }
    }
    public int? SelectedMonth
    {
        get => _selectedMonth;
        set
        {
            _selectedMonth = value;
            _ = UpdatedFilters();
        }
    }
    public string? SelectedCategory
    {
        get => _selectedCategory;
        set
        {
            _selectedCategory = value;
            _ = UpdatedFilters();
        }
    }
}
